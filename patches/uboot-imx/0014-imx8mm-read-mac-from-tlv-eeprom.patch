From 2905c39b3a2bfa90184644aa28137bca4fe73792 Mon Sep 17 00:00:00 2001
From: Josua Mayer <josua@solid-run.com>
Date: Mon, 6 Jun 2022 14:52:32 +0300
Subject: [PATCH 14/17] imx8mm: read mac from tlv eeprom

Signed-off-by: Josua Mayer <josua@solid-run.com>
---
 .../imx8mm_solidrun/imx8mm_solidrun.c         | 123 +++++++++++++++++-
 configs/imx8mm_solidrun_defconfig             |   4 +
 2 files changed, 125 insertions(+), 2 deletions(-)

diff --git a/board/solidrun/imx8mm_solidrun/imx8mm_solidrun.c b/board/solidrun/imx8mm_solidrun/imx8mm_solidrun.c
index 8c1ab60bfe..d41324ecd5 100644
--- a/board/solidrun/imx8mm_solidrun/imx8mm_solidrun.c
+++ b/board/solidrun/imx8mm_solidrun/imx8mm_solidrun.c
@@ -29,6 +29,7 @@
 #include <imx_mipi_dsi_bridge.h>
 #include <mipi_dsi_panel.h>
 #include <asm/mach-imx/video.h>
+#include <tlv_eeprom.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -661,12 +662,104 @@ int is_recovery_key_pressing(void)
 #endif /*CONFIG_ANDROID_RECOVERY*/
 #endif /*CONFIG_FSL_FASTBOOT*/
 
+/*
+ * Read TLV formatted data from eeprom.
+ * Only read as much data as indicated by the TLV header.
+ */
+// TODO: this should be a library function?!
+static bool get_tlvinfo_from_eeprom(int index, u8 *buffer, size_t length) {
+	struct tlvinfo_header *eeprom_hdr = (struct tlvinfo_header *) buffer;
+	struct tlvinfo_tlv *eeprom_tlv = (struct tlvinfo_tlv *) &buffer[sizeof(struct tlvinfo_header)];
+
+	if(length < TLV_INFO_HEADER_SIZE) {
+		pr_err("%s: buffer too small for tlv header!\n", __func__);
+		return false;
+	}
+	if(read_tlv_eeprom((void *)eeprom_hdr, 0, TLV_INFO_HEADER_SIZE, index) != 0) {
+		pr_err("%s: failed to read from eeprom!\n", __func__);
+		return false;
+	}
+	if(!is_valid_tlvinfo_header(eeprom_hdr)) {
+		pr_warn("%s: invalid tlv header!\n", __func__);
+		return false;
+	}
+	if(length - TLV_INFO_HEADER_SIZE < be16_to_cpu(eeprom_hdr->totallen)) {
+		pr_err("%s: buffer too small for tlv data!\n", __func__);
+		return false;
+	}
+	if(read_tlv_eeprom((void *)eeprom_tlv, sizeof(struct tlvinfo_header), be16_to_cpu(eeprom_hdr->totallen), index) != 0) {
+		pr_err("%s: failed to read from eeprom!\n", __func__);
+		return false;
+	}
+
+	return true;
+}
+
+static struct board_mac {
+	unsigned char base[2][6];
+	u16 count[2];
+} board_mac = {0};
+/*
+ *
+ */
+void board_mac_from_tlv_eeprom(void) {
+	static u8 eeprom[TLV_INFO_MAX_LEN] = {0};
+	int eeprom_index = 0;
+	struct tlvinfo_tlv *tlv = 0;
+
+	for(int i = 0; i < 2; i++) {
+		// read eeprom
+		if(!get_tlvinfo_from_eeprom(i, eeprom, sizeof(eeprom))) {
+			pr_info("%s: failed to read eeprom %d\n", __func__, i);
+			continue;
+		}
+
+		// read mac count
+		if(tlvinfo_find_tlv(eeprom, TLV_CODE_MAC_SIZE, &eeprom_index)) {
+			tlv = (void *)&eeprom[eeprom_index];
+			board_mac.count[i] = (tlv->value[0] << 8) | tlv->value[1];
+			pr_debug("%s: read mac count = %u\n", __func__, board_mac.count[i]);
+		}
+		if(!board_mac.count[i])
+			continue;
+
+		// read mac base
+		if(tlvinfo_find_tlv(eeprom, TLV_CODE_MAC_BASE, &eeprom_index)) {
+			tlv = (void *)&eeprom[eeprom_index];
+			memcpy(board_mac.base[i], tlv->value, 6);
+			pr_debug("%s: read mac base = %02X:%02X:%02X:%02X:%02X:%02X\n", __func__, board_mac.base[i][0], board_mac.base[i][1], board_mac.base[i][2], board_mac.base[i][3], board_mac.base[i][4], board_mac.base[i][5]);
+		}
+		if(!is_valid_ethaddr(board_mac.base[i])) {
+			pr_debug("%s: mac base is invalid\n", __func__);
+			continue;
+		}
+	}
+}
+
+// calculate n-th mac from base
+static void mac_add_n(unsigned char *base, u16 n) {
+	union {
+		unsigned char byte[8];
+		u64 number;
+	} temp;
+
+	memcpy(temp.byte, base, 6);
+	temp.number += n;
+	memcpy(base, temp.byte, 6);
+}
+
 /*
  * select board mac address for given interface
  */
 int board_get_mac(int dev_id, unsigned char *mac) {
-	char macenv[16] = {0};
-	mac[0] = 0;
+	static bool read_mac = false;
+	int i;
+
+	// read macs from eeprom
+	if(!read_mac) {
+		board_mac_from_tlv_eeprom();
+		read_mac = true;
+	}
 
 	/*
 	 * Note: Environment ethaddr (eth1addr, eth2addr, ...) has first priority,
@@ -675,6 +768,32 @@ int board_get_mac(int dev_id, unsigned char *mac) {
 	 * causing a feedback loop.
 	 */
 
+	// tlv eeproms
+	i = dev_id;
+	for(int j = 0; j < 2; j++) {
+		if(!is_valid_ethaddr(board_mac.base[j]))
+			continue;
+
+		// count if enough macs are provided
+		if(i >= board_mac.count[j]) {
+			// maybe in next eeprom?
+			i -= board_mac.count[j];
+			continue;
+		}
+
+		// compute i-th mac
+		memcpy(mac, board_mac.base[j], 6);
+		mac_add_n(mac, i);
+
+		if(is_valid_ethaddr(mac)) {
+			printf("%s: interface %i: using mac from tlv eeprom: %02X:%02X:%02X:%02X:%02X:%02X\n", __func__, dev_id, mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
+			return 0;
+		} else {
+			pr_debug("%s: computed mac %02X:%02X:%02X:%02X:%02X:%02X is invalid\n", __func__, mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
+			break;
+		}
+	}
+
 	// fuses
 	imx_get_mac_from_fuse(dev_id, mac);
 	if(is_valid_ethaddr(mac)) {
diff --git a/configs/imx8mm_solidrun_defconfig b/configs/imx8mm_solidrun_defconfig
index 47d8aa2f9e..e8f4c44341 100644
--- a/configs/imx8mm_solidrun_defconfig
+++ b/configs/imx8mm_solidrun_defconfig
@@ -90,3 +90,7 @@ CONFIG_USB_GADGET_PRODUCT_NUM=0xa4a5
 
 CONFIG_VIDEO=y
 CONFIG_IMX_SEC_MIPI_DSI=y
+
+CONFIG_MISC=y
+CONFIG_I2C_EEPROM=y
+CONFIG_CMD_TLV_EEPROM=y
-- 
2.35.3

